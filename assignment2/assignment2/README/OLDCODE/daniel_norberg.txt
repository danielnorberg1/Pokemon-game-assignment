Here is the old code before the task 8 was published.


// Old code before task 8

public class TypeEffectivenessOLD{
    public TypeEffectivenessOLD(){
            
        }

    public EnumEffectiveness calcEffectiveness(EnumType attType, EnumType defType){
        
        switch (attType) {
            case FIRE:
                switch (defType){
                    case GRASS:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    case NORMAL: 
                        return EnumEffectiveness.NORMALEFFECTIVE;
                    default:
                        return EnumEffectiveness.NOTEFFECTIVE;
                }
            case WATER:
                switch (defType){
                    case FIRE:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    case NORMAL: 
                        return EnumEffectiveness.NORMALEFFECTIVE;
                    default:
                        return EnumEffectiveness.NOTEFFECTIVE;
                }
            case GRASS:
                switch (defType){
                    case WATER:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    case NORMAL: 
                        return EnumEffectiveness.NORMALEFFECTIVE;
                    default:
                        return EnumEffectiveness.NOTEFFECTIVE;
                }
            default:
                return EnumEffectiveness.NORMALEFFECTIVE;
        }
    }
}


/////////////////////////
And here is the updated version after task 8.

package assignment2;

public class TypeEffectiveness {
    public TypeEffectiveness() {

    }

    public EnumEffectiveness calcEffectiveness(EnumType attType, EnumType defType) {

        switch (attType) {
            case BUG:
                switch (defType) {
                    case GRASS:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    case FIRE:
                        return EnumEffectiveness.NOTEFFECTIVE;
                    default:
                        return EnumEffectiveness.NORMALEFFECTIVE;
                }
            case DRAGON:
                switch (defType) {
                    case DRAGON:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    default:
                        return EnumEffectiveness.NORMALEFFECTIVE;
                }
            case ELECTRIC:
                switch (defType) {
                    case WATER:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    case DRAGON, ELECTRIC, GRASS:
                        return EnumEffectiveness.NOTEFFECTIVE;
                    default:
                        return EnumEffectiveness.NORMALEFFECTIVE;
                }
            case FIRE:
                switch (defType) {
                    case GRASS, BUG, ICE:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    case WATER, FIRE, DRAGON:
                        return EnumEffectiveness.NOTEFFECTIVE;
                    default:
                        return EnumEffectiveness.NORMALEFFECTIVE;
                }
            case GRASS:
                switch (defType) {
                    case WATER:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    case BUG, DRAGON, FIRE, GRASS:
                        return EnumEffectiveness.NOTEFFECTIVE;
                    default:
                        return EnumEffectiveness.NORMALEFFECTIVE;
                }
            case ICE:
                switch (defType) {
                    case DRAGON, GRASS:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    case FIRE, ICE, WATER:
                        return EnumEffectiveness.NOTEFFECTIVE;
                    default:
                        return EnumEffectiveness.NORMALEFFECTIVE;
                }
            case WATER:
                switch (defType) {
                    case FIRE:
                        return EnumEffectiveness.SUPEREFFECTIVE;
                    case DRAGON, GRASS, WATER:
                        return EnumEffectiveness.NOTEFFECTIVE;
                    default:
                        return EnumEffectiveness.NORMALEFFECTIVE;
                }

            default:
                return EnumEffectiveness.NORMALEFFECTIVE;
        }
    }
}

As you can se the structure of the code and how it works was not changed.
We had many reasons for not changing the code.
In the initial (and used) design the code had many advantages such as:

Readability: The code uses finals and enums which cleary points out, the attacking type,
and the defending type in the switch case.
 
Maintainability: The maintainability is rather easy since it would be easy to change either 
which type is effective againt which. Since changing the value of the effectivness is stored in 
finals you only nedd to change in one place.

Expandability: Since the code is a repeating itself it would be a problem if we would have 100 more types'.
But... since the customer did not want to have more than 8 types. We decided to use this.

And yes... we were thinking about using Maps who would be good for expandability, but in 
the end we went with the existing code since we thought as mention earlier that is is:
Easy to read, Maintainable, and "kind of" expandable.
